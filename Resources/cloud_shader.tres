[gd_resource type="VisualShader" load_steps=26 format=3 uid="uid://tkchpxxhhajr"]

[sub_resource type="VisualShaderNodeVec3Parameter" id="VisualShaderNodeVec3Parameter_yg012"]
parameter_name = "SunDir"
qualifier = 1

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_vcopm"]
expanded_output_ports = [0]
parameter_name = "SunColor"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_sx50g"]
default_input_values = [0, 0.0, 1, 2.0]
operator = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_8wfw1"]
input_name = "world_position"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_tr307"]
size = Vector2(520, 340)
expression = "float _a=snoise(uv);
float _b=snoise(uv*5.0);
float _c=snoise(uv*25.0);
float _d=snoise(uv*81.0);
density2 = _a*4.0 + _b* 1.5;
float _res= density2 + _c * 0.3 + _d * 0.1;
density = _res + 2.0;"

[sub_resource type="VisualShaderNodeGlobalExpression" id="VisualShaderNodeGlobalExpression_mn7kw"]
size = Vector2(580, 600)
expression = "//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20201014 (stegu)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
// 

vec3 mod289_v3(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289_v4(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
     return mod289_v4(((x*34.0)+10.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v)
  { 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289_v3(i); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.5 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 105.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
  }"

[sub_resource type="VisualShaderNodeVec3Parameter" id="VisualShaderNodeVec3Parameter_80s0t"]
parameter_name = "TextureScale"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_2rqb6"]
parameter_name = "CloudThickness"
hint = 1
max = 4.0

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_b8fd3"]
size = Vector2(620, 280)
expression = "float _a=snoise(uv);
float _b=snoise(uv*5.0);
float _c=snoise(uv*25.0);
float _d=snoise(uv*81.0);
float _zres=_a*3.0 + _b* 1.5 + _c * 0.3 + _d * 0.1;
density = _zres + 0.5;"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_nefoh"]
expanded_output_ports = [0]
input_name = "uvw"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_n73b8"]
source = 5

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_l4ruw"]
op_type = 0

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_a2c4e"]
parameter_name = "CloudProfile"

[sub_resource type="VisualShaderNodeVectorFunc" id="VisualShaderNodeVectorFunc_xv0tq"]

[sub_resource type="VisualShaderNodeMultiplyAdd" id="VisualShaderNodeMultiplyAdd_2qlmp"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0, 0, 0)]
op_type = 2

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_75qkt"]
parameter_name = "CloudLining"
hint = 1
min = -5.0
max = 5.0
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_mjfwc"]
operator = 2

[sub_resource type="VisualShaderNodeSmoothStep" id="VisualShaderNodeSmoothStep_lcsra"]

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_2n17w"]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_oyu3u"]
operator = 2

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_3t4w8"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_da6yn"]
operator = 2

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_3wu0a"]
parameter_name = "Albedo"

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_i5xrp"]
parameter_name = "Emission"

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_ywv5t"]
default_input_values = [0, 0.1, 1, 0.0]

[resource]
code = "shader_type fog;
uniform sampler2D CloudProfile;
uniform vec3 TextureScale;
uniform vec4 SunColor : source_color;
global uniform vec3 SunDir;
uniform float CloudLining : hint_range(-5, 5) = 1;
uniform vec4 Albedo : source_color;


// GlobalExpression:0
	//
	// Description : Array and textureless GLSL 2D/3D/4D simplex 
	//               noise functions.
	//      Author : Ian McEwan, Ashima Arts.
	//  Maintainer : stegu
	//     Lastmod : 20201014 (stegu)
	//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
	//               Distributed under the MIT License. See LICENSE file.
	//               https://github.com/ashima/webgl-noise
	//               https://github.com/stegu/webgl-noise
	// 
	
	vec3 mod289_v3(vec3 x) {
	  return x - floor(x * (1.0 / 289.0)) * 289.0;
	}
	
	vec4 mod289_v4(vec4 x) {
	  return x - floor(x * (1.0 / 289.0)) * 289.0;
	}
	
	vec4 permute(vec4 x) {
	     return mod289_v4(((x*34.0)+10.0)*x);
	}
	
	vec4 taylorInvSqrt(vec4 r)
	{
	  return 1.79284291400159 - 0.85373472095314 * r;
	}
	
	float snoise(vec3 v)
	  { 
	  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
	  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);
	
	// First corner
	  vec3 i  = floor(v + dot(v, C.yyy) );
	  vec3 x0 =   v - i + dot(i, C.xxx) ;
	
	// Other corners
	  vec3 g = step(x0.yzx, x0.xyz);
	  vec3 l = 1.0 - g;
	  vec3 i1 = min( g.xyz, l.zxy );
	  vec3 i2 = max( g.xyz, l.zxy );
	
	  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
	  //   x1 = x0 - i1  + 1.0 * C.xxx;
	  //   x2 = x0 - i2  + 2.0 * C.xxx;
	  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
	  vec3 x1 = x0 - i1 + C.xxx;
	  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
	  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y
	
	// Permutations
	  i = mod289_v3(i); 
	  vec4 p = permute( permute( permute( 
	             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
	           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
	           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));
	
	// Gradients: 7x7 points over a square, mapped onto an octahedron.
	// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
	  float n_ = 0.142857142857; // 1.0/7.0
	  vec3  ns = n_ * D.wyz - D.xzx;
	
	  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)
	
	  vec4 x_ = floor(j * ns.z);
	  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)
	
	  vec4 x = x_ *ns.x + ns.yyyy;
	  vec4 y = y_ *ns.x + ns.yyyy;
	  vec4 h = 1.0 - abs(x) - abs(y);
	
	  vec4 b0 = vec4( x.xy, y.xy );
	  vec4 b1 = vec4( x.zw, y.zw );
	
	  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
	  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
	  vec4 s0 = floor(b0)*2.0 + 1.0;
	  vec4 s1 = floor(b1)*2.0 + 1.0;
	  vec4 sh = -step(h, vec4(0.0));
	
	  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
	  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
	
	  vec3 p0 = vec3(a0.xy,h.x);
	  vec3 p1 = vec3(a0.zw,h.y);
	  vec3 p2 = vec3(a1.xy,h.z);
	  vec3 p3 = vec3(a1.zw,h.w);
	
	//Normalise gradients
	  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
	  p0 *= norm.x;
	  p1 *= norm.y;
	  p2 *= norm.z;
	  p3 *= norm.w;
	
	// Mix final noise value
	  vec4 m = max(0.5 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
	  m = m * m;
	  return 105.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
	                                dot(p2,x2), dot(p3,x3) ) );
	  }

void fog() {
// Input:36
	vec3 n_out36p0 = UVW;
	float n_out36p2 = n_out36p0.g;


// VectorCompose:38
	float n_in38p1 = 0.00000;
	vec2 n_out38p0 = vec2(n_out36p2, n_in38p1);


	vec4 n_out37p0;
// Texture2D:37
	n_out37p0 = texture(CloudProfile, n_out38p0);


// Input:3
	vec3 n_out3p0 = WORLD_POSITION;


// Vector3Parameter:32
	vec3 n_out32p0 = TextureScale;


// VectorOp:6
	vec3 n_out6p0 = n_out3p0 * n_out32p0;


	float n_out30p0;
	float n_out30p1;
// Expression:30
	n_out30p0 = 0.0;
	n_out30p1 = 0.0;
	{
		float _a=snoise(n_out6p0);
		float _b=snoise(n_out6p0*5.0);
		float _c=snoise(n_out6p0*25.0);
		float _d=snoise(n_out6p0*81.0);
		n_out30p1 = _a*4.0 + _b* 1.5;
		float _res= n_out30p1 + _c * 0.3 + _d * 0.1;
		n_out30p0 = _res + 2.0;
	}


// Step:9
	float n_out9p0 = step(n_out37p0.x, n_out30p0);


// FloatOp:29
	float n_in29p1 = 2.00000;
	float n_out29p0 = n_out9p0 * n_in29p1;


// ColorParameter:22
	vec4 n_out22p0 = SunColor;
	float n_out22p4 = n_out22p0.a;


// VectorOp:52
	vec3 n_out52p0 = vec3(n_out22p0.xyz) * vec3(n_out22p4);


// Vector3Parameter:14
	vec3 n_out14p0 = SunDir;


// VectorFunc:41
	vec3 n_out41p0 = normalize(n_out14p0);


// FloatParameter:43
	float n_out43p0 = CloudLining;


// MultiplyAdd:42
	vec3 n_out42p0 = fma(n_out41p0, vec3(n_out43p0), n_out3p0);


// VectorOp:44
	vec3 n_out44p0 = n_out42p0 * n_out32p0;


	float n_out34p0;
// Expression:34
	n_out34p0 = 0.0;
	{
		float _a=snoise(n_out44p0);
		float _b=snoise(n_out44p0*5.0);
		float _c=snoise(n_out44p0*25.0);
		float _d=snoise(n_out44p0*81.0);
		float _zres=_a*3.0 + _b* 1.5 + _c * 0.3 + _d * 0.1;
		n_out34p0 = _zres + 0.5;
	}


// SmoothStep:46
	float n_in46p1 = 1.00000;
	float n_out46p0 = smoothstep(n_out30p1, n_in46p1, n_out34p0);


// VectorOp:53
	vec3 n_out53p0 = n_out52p0 * vec3(n_out46p0);


// ColorParameter:7
	vec4 n_out7p0 = Albedo;


// Mix:54
	vec3 n_in54p2 = vec3(0.50000, 0.50000, 0.50000);
	vec3 n_out54p0 = mix(n_out53p0, vec3(n_out7p0.xyz), n_in54p2);


// Output:0
	DENSITY = n_out29p0;
	ALBEDO = n_out54p0;
	EMISSION = n_out53p0;


}
"
mode = 4
nodes/fog/0/position = Vector2(2000, 520)
nodes/fog/3/node = SubResource("VisualShaderNodeInput_8wfw1")
nodes/fog/3/position = Vector2(-600, 600)
nodes/fog/6/node = SubResource("VisualShaderNodeVectorOp_da6yn")
nodes/fog/6/position = Vector2(-300, 520)
nodes/fog/7/node = SubResource("VisualShaderNodeColorParameter_3wu0a")
nodes/fog/7/position = Vector2(2240, 1020)
nodes/fog/8/node = SubResource("VisualShaderNodeColorParameter_i5xrp")
nodes/fog/8/position = Vector2(1440, 1060)
nodes/fog/9/node = SubResource("VisualShaderNodeStep_ywv5t")
nodes/fog/9/position = Vector2(680, 120)
nodes/fog/14/node = SubResource("VisualShaderNodeVec3Parameter_yg012")
nodes/fog/14/position = Vector2(-1200, 1100)
nodes/fog/22/node = SubResource("VisualShaderNodeColorParameter_vcopm")
nodes/fog/22/position = Vector2(1220, 1260)
nodes/fog/29/node = SubResource("VisualShaderNodeFloatOp_sx50g")
nodes/fog/29/position = Vector2(1360, 440)
nodes/fog/30/node = SubResource("VisualShaderNodeExpression_tr307")
nodes/fog/30/position = Vector2(-20, -100)
nodes/fog/30/size = Vector2(520, 340)
nodes/fog/30/input_ports = "0,4,uv;"
nodes/fog/30/output_ports = "0,0,density;1,0,density2;"
nodes/fog/30/expression = "float _a=snoise(uv);
float _b=snoise(uv*5.0);
float _c=snoise(uv*25.0);
float _d=snoise(uv*81.0);
density2 = _a*4.0 + _b* 1.5;
float _res= density2 + _c * 0.3 + _d * 0.1;
density = _res + 2.0;"
nodes/fog/31/node = SubResource("VisualShaderNodeGlobalExpression_mn7kw")
nodes/fog/31/position = Vector2(-1520, 20)
nodes/fog/31/size = Vector2(580, 600)
nodes/fog/31/input_ports = ""
nodes/fog/31/output_ports = ""
nodes/fog/31/expression = "//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20201014 (stegu)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
// 

vec3 mod289_v3(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289_v4(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
     return mod289_v4(((x*34.0)+10.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v)
  { 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289_v3(i); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.5 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 105.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
  }"
nodes/fog/32/node = SubResource("VisualShaderNodeVec3Parameter_80s0t")
nodes/fog/32/position = Vector2(-620, 760)
nodes/fog/33/node = SubResource("VisualShaderNodeFloatParameter_2rqb6")
nodes/fog/33/position = Vector2(140, 240)
nodes/fog/34/node = SubResource("VisualShaderNodeExpression_b8fd3")
nodes/fog/34/position = Vector2(300, 1320)
nodes/fog/34/size = Vector2(620, 280)
nodes/fog/34/input_ports = "0,4,uv;"
nodes/fog/34/output_ports = "0,0,density;"
nodes/fog/34/expression = "float _a=snoise(uv);
float _b=snoise(uv*5.0);
float _c=snoise(uv*25.0);
float _d=snoise(uv*81.0);
float _zres=_a*3.0 + _b* 1.5 + _c * 0.3 + _d * 0.1;
density = _zres + 0.5;"
nodes/fog/36/node = SubResource("VisualShaderNodeInput_nefoh")
nodes/fog/36/position = Vector2(420, 660)
nodes/fog/37/node = SubResource("VisualShaderNodeTexture_n73b8")
nodes/fog/37/position = Vector2(900, 860)
nodes/fog/38/node = SubResource("VisualShaderNodeVectorCompose_l4ruw")
nodes/fog/38/position = Vector2(700, 800)
nodes/fog/39/node = SubResource("VisualShaderNodeTexture2DParameter_a2c4e")
nodes/fog/39/position = Vector2(340, 940)
nodes/fog/41/node = SubResource("VisualShaderNodeVectorFunc_xv0tq")
nodes/fog/41/position = Vector2(-900, 920)
nodes/fog/42/node = SubResource("VisualShaderNodeMultiplyAdd_2qlmp")
nodes/fog/42/position = Vector2(-260, 1140)
nodes/fog/43/node = SubResource("VisualShaderNodeFloatParameter_75qkt")
nodes/fog/43/position = Vector2(-1020, 1260)
nodes/fog/44/node = SubResource("VisualShaderNodeVectorOp_mjfwc")
nodes/fog/44/position = Vector2(40, 960)
nodes/fog/46/node = SubResource("VisualShaderNodeSmoothStep_lcsra")
nodes/fog/46/position = Vector2(1440, 780)
nodes/fog/52/node = SubResource("VisualShaderNodeVectorOp_2n17w")
nodes/fog/52/position = Vector2(1640, 1420)
nodes/fog/53/node = SubResource("VisualShaderNodeVectorOp_oyu3u")
nodes/fog/53/position = Vector2(1854.47, 1066.34)
nodes/fog/54/node = SubResource("VisualShaderNodeMix_3t4w8")
nodes/fog/54/position = Vector2(2340, 560)
nodes/fog/connections = PackedInt32Array(3, 0, 6, 0, 9, 0, 29, 0, 29, 0, 0, 0, 6, 0, 30, 0, 30, 0, 9, 1, 32, 0, 6, 1, 39, 0, 37, 2, 38, 0, 37, 0, 37, 0, 9, 0, 36, 2, 38, 0, 14, 0, 41, 0, 41, 0, 42, 0, 3, 0, 42, 2, 43, 0, 42, 1, 42, 0, 44, 0, 32, 0, 44, 1, 44, 0, 34, 0, 22, 0, 52, 0, 22, 4, 52, 1, 52, 0, 53, 0, 46, 0, 53, 1, 34, 0, 46, 2, 30, 1, 46, 0, 53, 0, 0, 2, 53, 0, 54, 0, 7, 0, 54, 1, 54, 0, 0, 1)
